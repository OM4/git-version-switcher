#!/usr/bin/env bash

VERBOSE_OUTPUT=false
DO_CHECKOUT=true
CWD=$PWD
NC="\033[0m"
YELLOW="\033[0;33m"
GREEN="\033[0;32m"
CYAN="\033[0;36m"

function usage_info() {
  echo "git version switcher: Checkout specific branch|commit|tag on targets"
  echo
  echo "Usage: $(basename "$0") [-h|-r|-v] <TARGET1> [TARGET2â€¦]"
  echo "   -h | --help          Display this help message"
  echo "   -r | --report-only   Discard version switching, only report"
  echo "   -v | --verbose       Verbose output"
  echo "   TARGET               Path and branch|commit|tag separated by a colon (:)"
}

# @param 'path/to/repo:checkout-target'
checkout() {
  # Split param
  REPO_PATH=$(echo "$1" | cut -f1 -d':')
  REPO_TARGET=$(echo "$1" | cut -f2 -d':')

  # Test path
  if [ ! -d "$REPO_PATH" ]; then
    echo "Target path ($REPO_PATH) not exists. Aborting"
    exit 1
  fi

  cd "$REPO_PATH"  || exit 1

  # Delete composer dependencies from WooCommerce
  if $DO_CHECKOUT && [ -f woocommerce.php ]; then
    $VERBOSE_OUTPUT && echo "Delete composer packages from $(pwd)" || true
    rm -f composer.lock && rm -rf vendor
  fi

  # Checkout target
  $DO_CHECKOUT && git checkout -fq "$REPO_TARGET"

  # Install composer dependencies for WooCommerce
  if $DO_CHECKOUT && [ -f woocommerce.php ]; then
    $VERBOSE_OUTPUT && echo "Install composer packages to $(pwd)" || true
    composer install --no-suggest --no-dev --quiet
  fi

  # Report target
  REPO_HEAD=$(git describe --tags --always)
  echo -e "$CYAN$(pwd): $YELLOW$REPO_HEAD$NC "
}

get_phpunit_version() {
  if [ -f "$CWD/vendor/bin/phpunit" ]; then
    PU=$("$CWD/vendor/bin/phpunit" --version | awk '{print $2}')
  elif command -v phpunit >/dev/null; then
    PU=$("phpunit" --version | awk '{print $2}')
  else
    PU="N/A"
  fi
  echo $PU
}

environment_info() {
  PHP_V=$(php -r "echo PHP_VERSION, \"\n\";")
  if php -i | grep -q "xdebug support"; then XD=enabled; else XD=disabled; fi
  PU=$(get_phpunit_version)
  echo -e "${GREEN}PHP: $YELLOW$PHP_V, ${GREEN}Xdebug: $YELLOW$XD, ${GREEN}PHPUnit: $YELLOW$PU$NC"
}

if [ $# -lt 1 ]; then
  echo Arguments missing!
  usage_info
  exit 1
fi

while [ -n "$1" ]; do
  case "$1" in
  --verbose | -v)
    VERBOSE_OUTPUT=true
    ;;
  --report-only | -r)
    DO_CHECKOUT=false
    ;;
  --help | -h)
    usage_info
    exit
    ;;
  *)
    checkout "$1"
    ;;
  esac
  shift
done

if $VERBOSE_OUTPUT; then
  environment_info
fi
