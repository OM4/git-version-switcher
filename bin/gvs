#!/usr/bin/env bash

VERBOSE_OUTPUT=false
DO_CHECKOUT=true
DO_UPDATE=false
REPOSITORIES=()
CWD=$PWD
NC="\033[0m"
YELLOW="\033[0;33m"
GREEN="\033[0;32m"
CYAN="\033[0;36m"

function usage_info() {
  echo "git version switcher: Checkout specific branch|commit|tag on targets"
  echo
  echo "Usage: $(basename "$0") [-h] [-u] [-r] [-v] <TARGET1> [TARGET2â€¦]"
  echo "   -h | --help          Display this help message"
  echo "   -u | --update        Update default remote (fetch)"
  echo "   -r | --report-only   Discard version switching, only report"
  echo "   -v | --verbose       Verbose output"
  echo "   TARGET               Path and branch|commit|tag separated by a colon (:)"
}

get_phpunit_version() {
  if [ -f "$CWD/vendor/bin/phpunit" ]; then
    PU=$("$CWD/vendor/bin/phpunit" --version | awk '{print $2}')
  elif command -v phpunit >/dev/null; then
    PU=$("phpunit" --version | awk '{print $2}')
  else
    PU="N/A"
  fi
  echo $PU
}

environment_info() {
  PHP_V=$(php -r "echo PHP_VERSION, \"\n\";")
  if php -i | grep -q "xdebug support"; then XD=enabled; else XD=disabled; fi
  PU=$(get_phpunit_version)
  echo -e "${GREEN}PHP: $YELLOW$PHP_V, ${GREEN}Xdebug: $YELLOW$XD, ${GREEN}PHPUnit: $YELLOW$PU$NC"
}

composer_self_update() {
  COMMAND="composer self-update --no-progress --${1} 2>/dev/null"
  if ! $COMMAND; then
    sudo "$COMMAND"
  fi
}

if [ $# -lt 1 ]; then
  echo Arguments missing!
  usage_info
  exit 1
fi

while [ -n "$1" ]; do
  case "$1" in
  --verbose | -v)
    VERBOSE_OUTPUT=true
    ;;
  --update | -u)
    DO_UPDATE=true
    ;;
  --report-only | -r)
    DO_CHECKOUT=false
    ;;
  --help | -h)
    usage_info
    exit
    ;;
  *)
    REPOSITORIES+=("$1")
    ;;
  esac
  shift
done

for REPO in "${REPOSITORIES[@]}"; do
  # Split param
  REPO_PATH=$(echo "$REPO" | cut -f1 -d':')
  REPO_TARGET=$(echo "$REPO" | cut -f2 -d':')

  # Test path
  if [ ! -d "$REPO_PATH" ]; then
    echo "Target path ($REPO_PATH) not exists. Aborting"
    exit 1
  fi

  cd "$REPO_PATH" || exit 1

  # Update (fetch)
  if $DO_UPDATE; then
    $VERBOSE_OUTPUT && echo "Update from remote (fetch) for $(pwd)" || true
    git fetch --tags --force
  fi

  # Checkout
  if $DO_CHECKOUT; then
    # Delete composer dependencies from WooCommerce
    if [ -f plugins/woocommerce/woocommerce.php ] || [ -f woocommerce.php ]; then
      if [ -f plugins/woocommerce/woocommerce.php ]; then
        # WooCommerce 6.0+ monorepo where composer.json is in plugins/woocommerce/composer.json
        cd plugins/woocommerce
      fi
      $VERBOSE_OUTPUT && echo "Delete composer packages from $(pwd)" || true
      rm -f composer.lock && rm -rf vendor
      cd "$REPO_PATH"
    fi

    # Checkout target
    git checkout --force --quiet "$REPO_TARGET"

    # Install composer dependencies for WooCommerce
    if [ -f plugins/woocommerce/woocommerce.php ] || [ -f woocommerce.php ]; then
      # Remove untracked files/directories to ensure monorepo specific files aren't left behind
      git clean -fxdq
      ORIGINAL_VERSION=$(composer --version | cut -d " " -f 3)
      if [ "${ORIGINAL_VERSION::1}" == "2" ]; then
        echo "Switching composer version to install WooCommerce dependencies"
        composer_self_update 1
      fi
      if [ -f plugins/woocommerce/woocommerce.php ]; then
        # WooCommerce 6.0+ monorepo where composer.json is in plugins/woocommerce/composer.json
        cd plugins/woocommerce
      fi
      $VERBOSE_OUTPUT && echo "Install composer packages to $(pwd)" || true
      composer install --no-suggest --no-dev --quiet
      cd "$REPO_PATH"
      NEW_VERSION=$(composer --version | cut -d " " -f 3)
      if [ "${ORIGINAL_VERSION::1}" != "${NEW_VERSION::1}" ]; then
        echo "Switching composer version to install WooCommerce dependencies"
        composer_self_update rollback
      fi
    fi
  fi

  # Report target
  REPO_HEAD=$(git describe --tags --always)
  echo -e "$CYAN$(pwd): $YELLOW$REPO_HEAD$NC "
done

if $VERBOSE_OUTPUT; then
  environment_info
fi
